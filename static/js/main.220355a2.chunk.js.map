{"version":3,"sources":["components/GuessForm.js","components/GuessResult.js","App.js","index.js"],"names":["GuessForm","attempts","btnRef","errorClasses","hasFieldError","inputRef","number","onHandleChange","onHandleKeypress","onHandleReset","onHandleSubmit","className","onSubmit","type","ref","value","onChange","onKeyPress","placeholder","disabled","onClick","emojies","5","4","3","2","1","colors","GuessResult","message","style","fontSize","getRandomInt","max","Math","floor","random","App","useRef","useState","setNumber","guessNumber","setGuessNumber","setMessage","setAttempts","setHasFieldError","useEffect","current","focus","e","target","keyCode","curren","click","preventDefault","isNaN","prevState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.220355a2.chunk.js","sourcesContent":["import React from 'react';\n\nconst GuessForm = ({\n  attempts,\n  btnRef,\n  errorClasses,\n  hasFieldError,\n  inputRef,\n  number,\n  onHandleChange,\n  onHandleKeypress,\n  onHandleReset,\n  onHandleSubmit,\n}) => {\n  return (\n    <form className=\"ui centered card form\" onSubmit={onHandleSubmit}>\n      <div className=\"content\">\n        <div className=\"header\">Type the number</div>\n        <div className=\"meta\">\n          <span className=\"date\">Guess the number between 1 and 100</span>\n        </div>\n        <div className=\"description\">\n          <div className={`ui input fluid focus ${errorClasses}`}>\n            <input\n              type=\"number\"\n              ref={inputRef}\n              value={number}\n              onChange={onHandleChange}\n              onKeyPress={onHandleKeypress}\n              placeholder=\"Number\"\n            />\n          </div>\n          {hasFieldError && (\n            <div className=\"inline field error\">\n              <div className=\"ui\">\n                <label>Type a valid number</label>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"extra content\">\n        <button\n          type=\"submit\"\n          ref={btnRef}\n          className=\"ui green button\"\n          disabled={attempts <= 0}\n        >\n          Guess\n        </button>\n        <button\n          className=\"ui grey button\"\n          type=\"button\"\n          onClick={onHandleReset}\n        >\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default GuessForm;\n","import React from 'react';\n\nconst emojies = {\n  5: 'ðŸ˜Ž',\n  4: 'ðŸ˜œ',\n  3: 'ðŸ™‚',\n  2: 'ðŸ¤”',\n  1: 'ðŸ˜¬',\n};\n\nconst colors = {\n  5: 'green',\n  4: 'yellow',\n  3: 'yellow',\n  2: 'orange',\n  1: 'red',\n};\n\nconst GuessResult = ({ attempts, message }) => {\n  return (\n    <div className=\"ui centered card form\">\n      <div className=\"content\">\n        <p>\n          <a className={`ui circular label ${colors[attempts] || 'green'}`}>\n            {attempts}\n          </a>{' '}\n          remaining attempts{' '}\n          <span style={{ fontSize: '20px' }}>{emojies[attempts] || 'ðŸ™‚'}</span>\n        </p>\n      </div>\n      <div className=\"content\">\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GuessResult;\n","import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport GuessForm from './components/GuessForm';\nimport GuessResult from './components/GuessResult';\n\nconst MAX_NUMBER = 100;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst App = () => {\n  const inputRef = useRef();\n  const btnRef = useRef();\n  const [number, setNumber] = useState('');\n  const [guessNumber, setGuessNumber] = useState();\n  const [message, setMessage] = useState('');\n  const [attempts, setAttempts] = useState(5);\n  const [hasFieldError, setHasFieldError] = useState(false);\n\n  useEffect(() => {\n    inputRef.current.focus();\n    setGuessNumber(getRandomInt(MAX_NUMBER));\n  }, []);\n\n  const onHandleChange = (e) => {\n    setNumber(e.target.value);\n    setHasFieldError(false);\n  };\n\n  const onHandleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!number || isNaN(number)) {\n      setHasFieldError(true);\n      return;\n    }\n\n    if (attempts <= 1) {\n      setMessage(\n        `You Lost, the number was ${guessNumber}, give another try by clicking Reset ðŸ˜‰`\n      );\n    } else if (guessNumber > number) {\n      setMessage(`The number is greater than ${number} ðŸ¤“`);\n    } else if (guessNumber < number) {\n      setMessage(`The number is less than ${number} ðŸ¤“`);\n    } else {\n      setMessage(`The number is ${number}, Congratulations ðŸŽ‰ðŸŽ‰!`);\n    }\n    setNumber('');\n    setAttempts((prevState) => prevState - 1);\n    inputRef.current.focus();\n  };\n\n  const onHandleReset = () => {\n    setAttempts(5);\n    setNumber('');\n    setHasFieldError('');\n    setMessage('');\n    setGuessNumber(getRandomInt(MAX_NUMBER));\n    inputRef.current.focus();\n  };\n\n  const onHandleKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.keyCode === 13) {\n      btnRef.curren.click();\n    }\n  };\n\n  const errorClasses = hasFieldError ? 'field error' : '';\n\n  return (\n    <div>\n      <h1 className=\"title\">Guess the Secret Number ðŸ˜Ž</h1>\n      <p />\n      <GuessForm\n        attempts={attempts}\n        btnRef={btnRef}\n        errorClasses={errorClasses}\n        hasFieldError={hasFieldError}\n        inputRef={inputRef}\n        number={number}\n        onHandleChange={onHandleChange}\n        onHandleKeypress={onHandleKeypress}\n        onHandleReset={onHandleReset}\n        onHandleSubmit={onHandleSubmit}\n      />\n      <GuessResult\n        attempts={attempts}\n        message={message}\n        hasFieldError={hasFieldError}\n      />\n      <div className=\"extra content\" />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}