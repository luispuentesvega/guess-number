{"version":3,"sources":["components/GuessResult.js","components/GuessForm.js","App.js","index.js"],"names":["emojies","5","4","3","2","1","colors","GuessResult","attempts","message","className","style","fontSize","GuessForm","btnRef","errorClasses","hasFieldError","inputRef","number","onHandleChange","onHandleKeypress","onHandleReset","onHandleSubmit","onSubmit","type","ref","value","onChange","onKeyPress","placeholder","disabled","onClick","App","useRef","useState","setNumber","guessNumber","setGuessNumber","setMessage","setAttempts","setHasFieldError","useEffect","max","current","focus","Math","floor","random","console","log","e","target","keyCode","curren","click","preventDefault","isNaN","prevState","ReactDOM","render","document","querySelector"],"mappings":"0KAEMA,EAAU,CACdC,EAAG,eACHC,EAAG,eACHC,EAAG,eACHC,EAAG,eACHC,EAAG,gBAGCC,EAAS,CACbL,EAAG,QACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,OAsBUE,EAnBK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,sBAAKC,UAAU,wBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,8BACE,mBAAGA,UAAS,4BAAuBJ,EAAOE,IAAa,SAAvD,SACGA,IACE,IAHP,qBAIqB,IACnB,sBAAMG,MAAO,CAAEC,SAAU,QAAzB,SAAoCZ,EAAQQ,IAAa,sBAG7D,qBAAKE,UAAU,UAAf,SACE,4BAAID,UCgCGI,EA5DG,SAAC,GAWZ,IAVLL,EAUI,EAVJA,SACAM,EASI,EATJA,OACAC,EAQI,EARJA,aACAC,EAOI,EAPJA,cACAC,EAMI,EANJA,SACAC,EAKI,EALJA,OACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,eAEA,OACE,uBAAMZ,UAAU,wBAAwBa,SAAUD,EAAlD,UACE,sBAAKZ,UAAU,UAAf,UACE,qBAAKA,UAAU,SAAf,6BACA,qBAAKA,UAAU,OAAf,SACE,sBAAMA,UAAU,OAAhB,kDAEF,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAS,+BAA0BK,GAAxC,SACE,uBACES,KAAK,OACLC,IAAKR,EACLS,MAAOR,EACPS,SAAUR,EACVS,WAAYR,EACZS,YAAY,aAGfb,GACC,qBAAKN,UAAU,qBAAf,SACE,qBAAKA,UAAU,KAAf,SACE,kEAMV,sBAAKA,UAAU,gBAAf,UACE,wBACEc,KAAK,SACLC,IAAKX,EACLJ,UAAU,kBACVoB,SAAUtB,GAAY,EAJxB,mBAQA,wBACEE,UAAU,iBACVc,KAAK,SACLO,QAASV,EAHX,0BC1CR,IAwFeW,EAxFH,WACV,IAAMf,EAAWgB,mBACXnB,EAASmB,mBAFC,EAGYC,mBAAS,IAHrB,mBAGThB,EAHS,KAGDiB,EAHC,OAIsBD,qBAJtB,mBAITE,EAJS,KAIIC,EAJJ,OAKcH,mBAAS,IALvB,mBAKTzB,EALS,KAKA6B,EALA,OAMgBJ,mBAAS,GANzB,mBAMT1B,EANS,KAMC+B,EAND,OAO0BL,oBAAS,GAPnC,mBAOTlB,EAPS,KAOMwB,EAPN,KAShBC,qBAAU,WAbZ,IAAsBC,EAclBzB,EAAS0B,QAAQC,QACjBP,GAfkBK,EAeU,IAdvBG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMJ,QAe1C,IAiDHM,QAAQC,IAAIb,GAEZ,IAAMrB,EAAeC,EAAgB,cAAgB,GAErD,OACE,gCACE,cAAC,EAAD,CACER,SAAUA,EACVM,OAAQA,EACRC,aAAcA,EACdC,cAAeA,EACfC,SAAUA,EACVC,OAAQA,EACRC,eA5DiB,SAAC+B,GACtBf,EAAUe,EAAEC,OAAOzB,OACnBc,GAAiB,IA2DbpB,iBArBmB,SAAC8B,GAEN,KAAdA,EAAEE,SACJtC,EAAOuC,OAAOC,SAmBZjC,cA9BgB,WACpBkB,EAAY,GACZJ,EAAU,IACVK,EAAiB,IACjBF,EAAW,IACXrB,EAAS0B,QAAQC,SA0BbtB,eA1DiB,SAAC4B,GAItB,GAHAF,QAAQC,IAAI,UAAW/B,GACvBgC,EAAEK,kBAEGrC,GAAUsC,MAAMtC,GAGnB,OAFA8B,QAAQC,IAAI,mBAAoB/B,QAChCsB,GAAiB,GAInBQ,QAAQC,IAAI,WAAYzC,GAEtB8B,EADE9B,GAAY,EACH,4BAAD,OACoB4B,EADpB,qDAGDA,EAAclB,EACZ,6BAAD,OAA8BA,EAA9B,iBACDkB,EAAclB,EACZ,8BAAD,OAA+BA,EAA/B,iBAEC,iBAAD,OAAkBA,EAAlB,4DAEZiB,EAAU,IACVI,GAAY,SAACkB,GAAD,OAAeA,EAAY,KACvCxC,EAAS0B,QAAQC,WAoCf,cAAC,EAAD,CACEpC,SAAUA,EACVC,QAASA,EACTO,cAAeA,QCvFvB0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,W","file":"static/js/main.75c22ed2.chunk.js","sourcesContent":["import React from 'react';\n\nconst emojies = {\n  5: 'ðŸ˜Ž',\n  4: 'ðŸ˜œ',\n  3: 'ðŸ™‚',\n  2: 'ðŸ¤”',\n  1: 'ðŸ˜¬',\n};\n\nconst colors = {\n  5: 'green',\n  4: 'yellow',\n  3: 'yellow',\n  2: 'orange',\n  1: 'red',\n};\n\nconst GuessResult = ({ attempts, message }) => {\n  return (\n    <div className=\"ui centered card form\">\n      <div className=\"content\">\n        <p>\n          <a className={`ui circular label ${colors[attempts] || 'green'}`}>\n            {attempts}\n          </a>{' '}\n          remaining attempts{' '}\n          <span style={{ fontSize: '20px' }}>{emojies[attempts] || 'ðŸ™‚'}</span>\n        </p>\n      </div>\n      <div className=\"content\">\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GuessResult;\n","import GuessResult from './GuessResult';\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst GuessForm = ({\n  attempts,\n  btnRef,\n  errorClasses,\n  hasFieldError,\n  inputRef,\n  number,\n  onHandleChange,\n  onHandleKeypress,\n  onHandleReset,\n  onHandleSubmit,\n}) => {\n  return (\n    <form className=\"ui centered card form\" onSubmit={onHandleSubmit}>\n      <div className=\"content\">\n        <div className=\"header\">Type the number</div>\n        <div className=\"meta\">\n          <span className=\"date\">Guess the number between 1 and 100</span>\n        </div>\n        <div className=\"description\">\n          <div className={`ui input fluid focus ${errorClasses}`}>\n            <input\n              type=\"text\"\n              ref={inputRef}\n              value={number}\n              onChange={onHandleChange}\n              onKeyPress={onHandleKeypress}\n              placeholder=\"Number\"\n            />\n          </div>\n          {hasFieldError && (\n            <div className=\"inline field error\">\n              <div className=\"ui\">\n                <label>Type a valid number</label>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"extra content\">\n        <button\n          type=\"submit\"\n          ref={btnRef}\n          className=\"ui green button\"\n          disabled={attempts <= 0}\n        >\n          Guess\n        </button>\n        <button\n          className=\"ui grey button\"\n          type=\"button\"\n          onClick={onHandleReset}\n        >\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default GuessForm;\n","import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport GuessForm from './components/GuessForm';\nimport GuessResult from './components/GuessResult';\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst App = () => {\n  const inputRef = useRef();\n  const btnRef = useRef();\n  const [number, setNumber] = useState('');\n  const [guessNumber, setGuessNumber] = useState();\n  const [message, setMessage] = useState('');\n  const [attempts, setAttempts] = useState(5);\n  const [hasFieldError, setHasFieldError] = useState(false);\n\n  useEffect(() => {\n    inputRef.current.focus();\n    setGuessNumber(getRandomInt(100));\n  }, []);\n\n  const onHandleChange = (e) => {\n    setNumber(e.target.value);\n    setHasFieldError(false);\n  };\n\n  const onHandleSubmit = (e) => {\n    console.log('SUBMIT:', number);\n    e.preventDefault();\n\n    if (!number || isNaN(number)) {\n      console.log('IS NOT A NUMBER ', number);\n      setHasFieldError(true);\n      return;\n    }\n\n    console.log('attempts', attempts);\n    if (attempts <= 1) {\n      setMessage(\n        `You Lost, the number was ${guessNumber}, give another try by clicking Reset ðŸ˜‰`\n      );\n    } else if (guessNumber > number) {\n      setMessage(`The number is bigger than ${number} ðŸ¤“`);\n    } else if (guessNumber < number) {\n      setMessage(`The number is smaller than ${number} ðŸ¤“`);\n    } else {\n      setMessage(`The number is ${number}, Congratulations ðŸŽ‰ðŸŽ‰ðŸŽ‰!`);\n    }\n    setNumber('');\n    setAttempts((prevState) => prevState - 1);\n    inputRef.current.focus();\n  };\n\n  const onHandleReset = () => {\n    setAttempts(5);\n    setNumber('');\n    setHasFieldError('');\n    setMessage('');\n    inputRef.current.focus();\n  };\n\n  const onHandleKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.keyCode === 13) {\n      btnRef.curren.click();\n    }\n  };\n\n  console.log(guessNumber);\n\n  const errorClasses = hasFieldError ? 'field error' : '';\n\n  return (\n    <div>\n      <GuessForm\n        attempts={attempts}\n        btnRef={btnRef}\n        errorClasses={errorClasses}\n        hasFieldError={hasFieldError}\n        inputRef={inputRef}\n        number={number}\n        onHandleChange={onHandleChange}\n        onHandleKeypress={onHandleKeypress}\n        onHandleReset={onHandleReset}\n        onHandleSubmit={onHandleSubmit}\n      />\n      <GuessResult\n        attempts={attempts}\n        message={message}\n        hasFieldError={hasFieldError}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}